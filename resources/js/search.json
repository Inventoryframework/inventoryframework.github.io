[[{"l":"Inventory Framework Plugin"},{"i":"last-updated-19th-december-2022","l":"Last updated: 19th December, 2022"},{"i":"what-is-the-inventoryframeworkplugin","l":"What is the InventoryFrameworkPlugin?","p":["A system that has no reliance on widgets to create or handle its data, meaning it is possible to use the data for any widget you create and not be dependent on the widgets that come with this system.","Actor appearance duplication system that copies the appearance of your items allowing you to both inspect items and auto-generate icons. It works with all actors, not just item actors. No longer do you need to follow a hierarchy setup like many other inventory systems need. You can create your items however you want and the system will automatically duplicate the appearance for either generating item icons or letting you examine an item.","Actor component and item parents that handle all the logic for you and are abstract enough so you can implement your mechanics and systems into it.","Color Sheet: - - - - Interface.","Container system that allows for near infinite (array limit) items inside of items. This means you can make a backpack, which has several containers, then a gun inside one of those containers and then that gun can have containers which have items inside of them. It can keep going for as long as you want.","Data asset which only shows relevant information to your desired rules with inbuilt functions and instanced objects that can have custom variables per data asset.","From my research, inventory systems were taking 2-6 months (depending on how advanced it was) to be designed, bug tested, network tested and to be documented. With this framework, I try to provide you the framework needed to create your perfect inventory system and bring that initial creation time down.","If you have any issues or questions neither the videos or documentation answer then feel free to message me on Discord or join the discord channel. You can look at the FAQ below for more info.","It is advised to have some C++ knowledge or have access to someone who has C++ knowledge before buying this plugin, but it is not necessary.","It is NOT an inventory to fully replicate the mechanics of any specific game. If you want your system to behave like a specific game, you will have to implement those specific mechanics yourself. This system does try to provide you with the functions and data to replicate most inventory systems.","Nearly every inventory system shares the same foundation, a container with tiles and items slot into those tiles. This Inventory Framework Plugin (IFP) attempts to be that foundation for your project, while allowing for a high level of inventory design, item customization, rapid prototyping and system integration.","some blue text.","This plugin does not contain any game-ready art, only demo-ready art. This is purely an inventory system for you to integrate with your game. This is mainly done to reduce bloat and integration pains.","This plugin does not provide an interaction system for you, but an interface system is integrated as that�s the foundation of nearly every interaction system I�ve seen. This is done so it�s more flexible to a project's interaction system. Some use on-click, some use linetrace or something else, but at the heart of most of them is an interface handling the interaction. This is designed to be replaced, as most people already have an interaction system already in place.","What this provides is the C++ foundation for your programmers and a good Blueprint foundation for your designers, which includes:","Widgets that are designer friendly (Easy to implement new logic, add animations to events, create children, etc). They also handle all the drag, drop, highlighting, splitting, combining logic and more."]}],[{"l":"Notes about the design decisions and its architecture","p":["This plugin was created for an open-world game that has very strict performance requirements. Because of this, some logic is handled in C++ as an inventory system like this does a lot of math. The design architecture is also designed to give programmers more control of when widgets and data is initialized. The architecture has also been made in mind for large-scale projects. This does mean though that there is a specific and strict workflow for setting up the component for items, especially sub containers. I've made an Editor Utility Widget which should prevent any human errors and allow people to work in the system without those strict requirements slowing down your creation process.","The architecture was made with designers in mind, so certain C++ functions can be overridden in Blueprints and some functions are only needed on the Blueprint level and in some cases there are both C++ and Blueprint versions of the same function. This system is not meant to be purely C++ or Blueprints, but a healthy mix of the two. If you can't write in C++ or don't have access to anyone who can write C++ code for you, the current functions should allow for you to create nearly any Blueprint logic you should need.","Data Assets are being used instead of Data Tables for a few reasons:","You can create children of the item data asset to create a brand new type of item with its own unique settings and not have those settings clutter the items that aren't relevant to those settings.","You can control their loading and unloading in the Asset Manager.","Easier to create Utility Widgets and automating tests.","It's easier to find out what assets are referencing which data asset, while with Data Tables, it can get messy to find out what asset is referencing a specific row.","Data tables are not ideal for managing massive databases. With every row, any variable that is a hard reference will be loaded by any item that is referencing the data table. If itemA references the data table but uses RowA, it’s going to load every single row in the data table and all the hard references in there, not just RowA. This also means that every time you’d add an item, the size map and hard references would grow for every item in the game. This quickly spirals out of control and quickly your assets can become 100+ MB’s, whereas with data assets, they are self-contained and only load the hard references made inside of them."]}],[{"l":"AC_Inventory"}],[{"l":"O_MasterObject"}],[{"i":"10","l":"1.0","p":["Initial release"]}]]